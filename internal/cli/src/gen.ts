#!/usr/bin/env node
import glob from 'fast-glob'
import fsp from 'fs/promises'
import _ from 'lodash'
import path from 'path'
import { replaceInFile } from 'replace-in-file'
import { pkgsDirJoin } from './utils'

const warnMessage =
  'THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.'

const Actions = _.mapValues(
  {
    ready: null,
    setAppMuted: null,
    setAppVolume: null,
    // BannerAd
    bannerShow: 'banner.show',
    bannerHide: 'banner.hide',
    // InterstitialAd
    interstitialIsLoaded: 'interstitial.isLoaded',
    interstitialLoad: 'interstitial.load',
    interstitialShow: 'interstitial.show',
    // RewardedAd
    rewardedIsReady: 'rewarded.isReady',
    rewardedLoad: 'rewarded.load',
    rewardedShow: 'rewarded.show',
  },
  (v, k) => (v === null ? k : v),
)

const Events = _.mapValues(
  {
    ready: null,
    // BannerAd
    bannerLoad: 'banner.load',
    bannerLoadFail: 'banner.loadFail',
    bannerOpen: 'banner.open',
    bannerClose: 'banner.close',
    bannerExitApp: 'banner.exitApp',
    bannerImpression: 'banner.impression',
    bannerClick: 'banner.click',
    // InterstitialAd
    interstitialLoad: 'interstitial.load',
    interstitialLoadFail: 'interstitial.loadFail',
    interstitialOpen: 'interstitial.open',
    interstitialClose: 'interstitial.close',
    interstitialExitApp: 'interstitial.exitApp',
    interstitialImpression: 'interstitial.impression',
    interstitialClick: 'interstitial.click',
    // RewardedAd
    rewardedLoad: 'rewarded.load',
    rewardedLoadFail: 'rewarded.loadFail',
    rewardedOpen: 'rewarded.open',
    rewardedClose: 'rewarded.close',
    rewardedStart: 'rewarded.start',
    rewardedComplete: 'rewarded.complete',
    rewardedReward: 'rewarded.reward',
    rewardedExitApp: 'rewarded.exitApp',
    rewardedImpression: 'rewarded.impression',
    rewardedClick: 'rewarded.click',
  },
  (v, k) => `admob.${v === null ? k : v}`,
)

const AdSizeTypes = [
  'BANNER',
  'LARGE_BANNER',
  'MEDIUM_RECTANGLE',
  'FULL_BANNER',
  'LEADERBOARD',
  'SMART_BANNER',
]

const indent4 = (n: number) => _.repeat(' ', 4 * n)

function buildJava(): string {
  const linesActions = _.map(
    Actions,
    (v, k) =>
      `${indent4(2)}public static final String ${_.snakeCase(
        k,
      ).toUpperCase()} = "${v}";`,
  )
    .sort()
    .join('\n')

  const linesEvents = _.map(
    Events,
    (v, k) =>
      `${indent4(2)}public static final String ${_.snakeCase(
        k,
      ).toUpperCase()} = "${v}";`,
  )
    .sort()
    .join('\n')

  const linesAdSizeType = [
    `${indent4(2)}${AdSizeTypes.map((s) => `${s}`).join(', ')}`,
    '',
    `${indent4(2)}public static AdSize getAdSize(Object adSize) {`,
    ..._.flatMap(AdSizeTypes, (s) => [
      `${indent4(3)}if (AdSizeType.${s}.equals(adSize)) {`,
      `${indent4(4)}return AdSize.${s};`,
      `${indent4(3)}}`,
    ]),
    `${indent4(3)}return null;`,
    `${indent4(2)}}`,
  ].join('\n')

  return `// ${warnMessage}
package admob.plugin;

import com.google.android.gms.ads.AdSize;

public final class Generated {
    public final class Actions {
${linesActions}
    }

    public final class Events {
${linesEvents}
    }

    public enum AdSizeType {
${linesAdSizeType}
    }
}
`
}

function buildGeneratedSwift(): string {
  const linesEvents = Object.keys(Events)
    .map((k) => `    static let ${_.camelCase(k)} = "${Events[k]}"`)
    .sort()
    .join('\n')

  return `// ${warnMessage}
struct AMSBannerPosition {
    static let bottom = "bottom"
    static let top = "top"
}

struct AMSEvents {
${linesEvents}
}
`
}

function buildTypeScript(): string {
  const linesActions = _.map(Actions, (v, k) => `  ${k} = '${v}',`)
    .sort()
    .join('\n')

  const linesEvents = _.map(Events, (v, k) => `  ${k} = '${v}',`)
    .sort()
    .join('\n')

  const adSizeType = AdSizeTypes.map((s) => `  ${s},`).join('\n')

  return `// ${warnMessage}
export enum NativeActions {
  Service = 'AdMob',
${linesActions}
}

export enum Events {
${linesEvents}
}

export enum AdSizeType {
${adSizeType}
}
`
}

async function updateConfigXML() {
  const [androidFiles, iosFiles] = await Promise.all([
    glob(['**/*.java'], {
      cwd: pkgsDirJoin('cordova/src/android'),
    }),
    glob(['*.swift'], {
      cwd: pkgsDirJoin('cordova/src/ios'),
    }),
  ])
  const androidContent = androidFiles
    .map((s) => {
      let d = path.dirname(s.toString())
      d = d === '.' ? '' : `/${d}`
      return `        <source-file src="src/android/${s}" target-dir="src/admob/plugin${d}" />`
    })
    .sort()
    .join('\n')
  const iosContent = iosFiles
    .map((s) => `        <source-file src="src/ios/${s}" />`)
    .sort()
    .join('\n')
  await replaceInFile({
    files: [pkgsDirJoin('cordova/plugin.xml')],
    from: /([\S\s]*ANDROID_BEGIN -->\n)[\S\s]*(\n\s+<!-- AUTOGENERATED: ANDROID_END[\S\s]*IOS_BEGIN -->\n)[\S\s]*(\n\s+<!-- AUTOGENERATED: IOS_END[\S\s]*)/,
    to: `$1${androidContent}$2${iosContent}$3`,
  })
}

async function main() {
  const l = [
    {
      filepath: 'cordova/src/android/Generated.java',
      f: buildJava,
    },
    {
      filepath: 'cordova/src/ios/AMSGenerated.swift',
      f: buildGeneratedSwift,
    },
    { filepath: 'cordova/ts/generated.ts', f: buildTypeScript },
  ]
  await Promise.all(
    l.map(({ filepath, f }) =>
      fsp.writeFile(pkgsDirJoin(filepath), f(), 'utf8'),
    ),
  )

  await updateConfigXML()
}

main()

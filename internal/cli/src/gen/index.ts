#!/usr/bin/env node
import glob from 'fast-glob'
import fsp from 'fs/promises'
import _ from 'lodash'
import path from 'path'
import { replaceInFile } from 'replace-in-file'
import { pkgsDirJoin } from '../utils'
import admob from './admob'
import consent from './consent'

async function updateConfigXML() {
  const [androidFiles, iosFiles] = await Promise.all([
    glob(['**/*.java'], {
      cwd: pkgsDirJoin('cordova/src/android'),
    }),
    glob(['*.swift'], {
      cwd: pkgsDirJoin('cordova/src/ios'),
    }),
  ])
  const androidContent = androidFiles
    .map((s) => {
      let d = path.dirname(s.toString())
      d = d === '.' ? '' : `/${d}`
      return `        <source-file src="src/android/${s}" target-dir="src/admob/plugin${d}" />`
    })
    .sort()
    .join('\n')
  const iosContent = iosFiles
    .map((s) => `        <source-file src="src/ios/${s}" />`)
    .sort()
    .join('\n')
  await replaceInFile({
    files: [pkgsDirJoin('cordova/plugin.xml')],
    from: /([\S\s]*ANDROID_BEGIN -->\n)[\S\s]*(\n\s+<!-- AUTOGENERATED: ANDROID_END[\S\s]*IOS_BEGIN -->\n)[\S\s]*(\n\s+<!-- AUTOGENERATED: IOS_END[\S\s]*)/,
    to: `$1${androidContent}$2${iosContent}$3`,
  })
}

async function main() {
  const specs = await Promise.all([admob, consent].map((f) => f()))

  await Promise.all(
    _.flatMap(specs, ({ files }) => files).map((x) =>
      fsp.writeFile(pkgsDirJoin(x.path), x.f(), 'utf8'),
    ),
  )

  await updateConfigXML()
}

main()

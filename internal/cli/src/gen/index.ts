#!/usr/bin/env node
import assert from 'assert'
import execa from 'execa'
import glob from 'fast-glob'
import fse from 'fs-extra'
import fsp from 'fs/promises'
import handlebars from 'handlebars'
import _ from 'lodash'
import markdownMagic from 'markdown-magic'
import path from 'path'
import { replaceInFile } from 'replace-in-file'
import { pkgsDirJoin } from '../utils'
import admob from './admob'
import capacitor from './capacitor'
import consent from './consent'
import { indent4 } from './shared'

async function updateConfigXML({
  pkgDir,
  targetDir,
}: {
  pkgDir: string
  targetDir: string
}) {
  const [androidFiles, iosFiles] = await Promise.all([
    glob(['**/*.java'], {
      cwd: path.join(pkgDir, 'src/android'),
    }),
    glob(['*.swift'], {
      cwd: path.join(pkgDir, 'src/ios'),
    }),
  ])
  const androidContent = androidFiles
    .map((s) => {
      const d = path.join(targetDir, path.dirname(s.toString()))
      return `${indent4(
        2,
      )}<source-file src="src/android/${s}" target-dir="${d}" />`
    })
    .sort()
    .join('\n')
  const iosContent = iosFiles
    .map((s) => `${indent4(2)}<source-file src="src/ios/${s}" />`)
    .sort()
    .join('\n')

  await replaceInFile({
    files: [path.join(pkgDir, 'plugin.xml')],
    from: /([\S\s]*ANDROID_BEGIN -->\n)[\S\s]*(\n\s+<!-- AUTOGENERATED: ANDROID_END[\S\s]*IOS_BEGIN -->\n)[\S\s]*(\n\s+<!-- AUTOGENERATED: IOS_END[\S\s]*)/,
    to: `$1${androidContent}$2${iosContent}$3`,
  })
}

const updateCliReadme = async () => {
  const markdownPath = pkgsDirJoin('cli/README.md')
  // eslint-disable-next-line node/no-missing-require
  const templatePath = require.resolve('../../templates/cli-readme.md.hbs')
  const template = handlebars.compile(await fse.readFile(templatePath, 'utf8'))

  const { stdout: usage } = await execa('yarn', ['admob-plus', '--help'])
  const commands = await Promise.all(
    ['doctor', 'info'].map(async (x) => {
      const { stdout } = await execa('yarn', ['admob-plus', x, '--help'])
      const m = stdout.match(/^([^\n]+)\s+([^\n]+)([\S\s]+)$/)
      assert(m)
      return {
        cmd: m[1],
        desc: m[2].trim(),
        help: m[3].trim(),
      }
    }),
  )

  await new Promise((resolve) => {
    markdownMagic(
      markdownPath,
      {
        transforms: {
          CLI() {
            return template({ usage, commands }).trim()
          },
        },
      },
      resolve,
    )
  })
}

const generateFiles = async () => {
  const specs = await Promise.all([admob, capacitor, consent].map((f) => f()))

  await Promise.all(
    _.flatMap(specs, ({ files }) => files).map((x) =>
      fsp.writeFile(pkgsDirJoin(x.path), x.f()),
    ),
  )

  await Promise.all(specs.filter((x) => x.targetDir).map(updateConfigXML))
}

const main = async () => {
  await Promise.all([updateCliReadme(), generateFiles()])
}

main()
